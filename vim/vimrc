" All system-wide defaults are set in $VIMRUNTIME/debian.vim and sourced by
" the call to :runtime you can find below.  If you wish to change any of those
" settings, you should do it in this file (/etc/vim/vimrc), since debian.vim
" will be overwritten everytime an upgrade of the vim packages is performed.
" It is recommended to make changes after sourcing debian.vim since it alters
" the value of the 'compatible' option.

runtime! debian.vim

" Vim will load $VIMRUNTIME/defaults.vim if the user does not have a vimrc.
" This happens after /etc/vim/vimrc(.local) are loaded, so it will override
" any settings in these files.
" If you don't want that to happen, uncomment the below line to prevent
" defaults.vim from being loaded.
" let g:skip_defaults_vim = 1

" Uncomment the next line to make Vim more Vi-compatible
" NOTE: debian.vim sets 'nocompatible'.  Setting 'compatible' changes numerous
" options, so any other options should be set AFTER setting 'compatible'.
"set compatible

" Vim5 and later versions support syntax highlighting. Uncommenting the next
" line enables syntax highlighting by default.
if has("syntax")
  syntax on
endif

" If using a dark background within the editing area and syntax highlighting
" turn on this option as well
"set background=dark

" Uncomment the following to have Vim jump to the last position when
" reopening a file
"au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

" Uncomment the following to have Vim load indentation rules and plugins
" according to the detected filetype.
"filetype plugin indent on

" The following are commented out as they cause vim to behave a lot
" differently from regular Vi. They are highly recommended though.
"set showcmd		" Show (partial) command in status line.
"set showmatch		" Show matching brackets.
"set ignorecase		" Do case insensitive matching
"set smartcase		" Do smart case matching
"set incsearch		" Incremental search
"set autowrite		" Automatically save before commands like :next and :make
"set hidden		" Hide buffers when they are abandoned
"set mouse=a		" Enable mouse usage (all modes)

" Source a global configuration file if available
if filereadable("/etc/vim/vimrc.local")
  source /etc/vim/vimrc.local
endif

set nu

colorscheme molokai

set termguicolors

syntax on

set expandtab

set autoindent

if filereadable("session.vim")
        source session.vim
endif

xmap ga <Plug>(EasyAlign)

nmap ga <Plug>(EasyAlign)

"inoremap ' ''<ESC>i
"inoremap " ""<ESC>i
"inoremap ( ()<ESC>i
"inoremap [ []<ESC>i
"inoremap { {<CR>}<ESC>O

inoremap <C-h> <Left>
inoremap <C-j> <Down>
inoremap <C-k> <Up>
inoremap <C-l> <Right>


cnoremap <C-h> <Left>
cnoremap <C-j> <Down>
cnoremap <C-k> <Up>
cnoremap <C-l> <Right>

"nmap <F4> :py3f /usr/share/clang/clang-format-14/clang-format.py<cr>
"imap <F4> :py3f /usr/share/clang/clang-format-14/clang-format.py<cr>
"
"function! Formatonsave()
"        py3f /usr/share/clang/clang-format-14/clang-format.py
"endfunction
"
"autocmd BufWritePre *.h,*.c,*.cpp call Formatonsave()


set equalprg=clang-format

nmap <F4> mzgg=G'z

if executable('ag')
        let g:ackprg='ag --vimgrep'
endif

command Todo Ack! 'TODO|FIXME|CHANGED|BUG|HACK'

command Debug Ack! 'INFO|IDEA'

command Note Ack! 'ONBON_NOTE'

if has ("autocmd")
        "HIGHLIGHT TODO,FIXME,NOTE,ect.
        if v:version > 701
                autocmd Syntax * call matchadd('Todo','\W\zsTODO\\FIXME\\CHANGED\\BUG\\HACK')

                autocmd Syntax * call matchadd('Debug','\W\zsONBON_NOTE\\INFO\\IDEA')
        endif
endif

fun! SetMyTodos()
        syn match myTodos /\%(ONBON_NOTE:\)\|\%(TODO:\)\|\%(HACK:\)\|\%(INFO:\)\|\%(CHANGED:\)\|\%(BUG:\)/ 
"        syn keyword myTodos FIXME TODO CHANGED NOTE HACK IDEA INFO XXX        
        hi link myTodos OnbonTodo
"        syn region myComments start=/\/\*/ end=/\*\// contains=myTodos
        syn cluster     cCommentGroup        contains=myTodos
endfu

autocmd bufenter * :call SetMyTodos()
autocmd filetype * :call SetMyTodos()
